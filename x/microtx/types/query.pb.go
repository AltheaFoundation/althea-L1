// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtx/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Query the current microtx params
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Query the additional fee paid on MsgMicrotx, determined by governance
type QueryMicrotxFeeRequest struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryMicrotxFeeRequest) Reset()         { *m = QueryMicrotxFeeRequest{} }
func (m *QueryMicrotxFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMicrotxFeeRequest) ProtoMessage()    {}
func (*QueryMicrotxFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{2}
}
func (m *QueryMicrotxFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMicrotxFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMicrotxFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMicrotxFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMicrotxFeeRequest.Merge(m, src)
}
func (m *QueryMicrotxFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMicrotxFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMicrotxFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMicrotxFeeRequest proto.InternalMessageInfo

func (m *QueryMicrotxFeeRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryMicrotxFeeResponse struct {
	FeeAmount uint64 `protobuf:"varint,1,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
}

func (m *QueryMicrotxFeeResponse) Reset()         { *m = QueryMicrotxFeeResponse{} }
func (m *QueryMicrotxFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMicrotxFeeResponse) ProtoMessage()    {}
func (*QueryMicrotxFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{3}
}
func (m *QueryMicrotxFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMicrotxFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMicrotxFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMicrotxFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMicrotxFeeResponse.Merge(m, src)
}
func (m *QueryMicrotxFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMicrotxFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMicrotxFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMicrotxFeeResponse proto.InternalMessageInfo

func (m *QueryMicrotxFeeResponse) GetFeeAmount() uint64 {
	if m != nil {
		return m.FeeAmount
	}
	return 0
}

// Query the tokenized accounts known to the module
type QueryTokenizedAccountsRequest struct {
}

func (m *QueryTokenizedAccountsRequest) Reset()         { *m = QueryTokenizedAccountsRequest{} }
func (m *QueryTokenizedAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizedAccountsRequest) ProtoMessage()    {}
func (*QueryTokenizedAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{4}
}
func (m *QueryTokenizedAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizedAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizedAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizedAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizedAccountsRequest.Merge(m, src)
}
func (m *QueryTokenizedAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizedAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizedAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizedAccountsRequest proto.InternalMessageInfo

type QueryTokenizedAccountsResponse struct {
	Accounts []*TokenizedAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *QueryTokenizedAccountsResponse) Reset()         { *m = QueryTokenizedAccountsResponse{} }
func (m *QueryTokenizedAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizedAccountsResponse) ProtoMessage()    {}
func (*QueryTokenizedAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{5}
}
func (m *QueryTokenizedAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizedAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizedAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizedAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizedAccountsResponse.Merge(m, src)
}
func (m *QueryTokenizedAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizedAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizedAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizedAccountsResponse proto.InternalMessageInfo

func (m *QueryTokenizedAccountsResponse) GetAccounts() []*TokenizedAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Query for info about one particular Tokenized Account
// OWNER if a bech32 address is provided, potenitally many accounts will be returned
// TOKENIZED_ACCOUNT if a bech32 address is provided, the owner and nft contract address will be returned
// NFT_ADDRESS if a EVM address is provided and happens to be a TokenizedAccountNFT contract, the owner and tokenized_account will be returned
type QueryTokenizedAccountRequest struct {
	Owner            string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	TokenizedAccount string `protobuf:"bytes,2,opt,name=tokenized_account,json=tokenizedAccount,proto3" json:"tokenized_account,omitempty"`
	NftAddress       string `protobuf:"bytes,3,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
}

func (m *QueryTokenizedAccountRequest) Reset()         { *m = QueryTokenizedAccountRequest{} }
func (m *QueryTokenizedAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizedAccountRequest) ProtoMessage()    {}
func (*QueryTokenizedAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{6}
}
func (m *QueryTokenizedAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizedAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizedAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizedAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizedAccountRequest.Merge(m, src)
}
func (m *QueryTokenizedAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizedAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizedAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizedAccountRequest proto.InternalMessageInfo

func (m *QueryTokenizedAccountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryTokenizedAccountRequest) GetTokenizedAccount() string {
	if m != nil {
		return m.TokenizedAccount
	}
	return ""
}

func (m *QueryTokenizedAccountRequest) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

type QueryTokenizedAccountResponse struct {
	Accounts []*TokenizedAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *QueryTokenizedAccountResponse) Reset()         { *m = QueryTokenizedAccountResponse{} }
func (m *QueryTokenizedAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizedAccountResponse) ProtoMessage()    {}
func (*QueryTokenizedAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1552e394eb0ed2e0, []int{7}
}
func (m *QueryTokenizedAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizedAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizedAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizedAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizedAccountResponse.Merge(m, src)
}
func (m *QueryTokenizedAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizedAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizedAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizedAccountResponse proto.InternalMessageInfo

func (m *QueryTokenizedAccountResponse) GetAccounts() []*TokenizedAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "microtx.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "microtx.v1.QueryParamsResponse")
	proto.RegisterType((*QueryMicrotxFeeRequest)(nil), "microtx.v1.QueryMicrotxFeeRequest")
	proto.RegisterType((*QueryMicrotxFeeResponse)(nil), "microtx.v1.QueryMicrotxFeeResponse")
	proto.RegisterType((*QueryTokenizedAccountsRequest)(nil), "microtx.v1.QueryTokenizedAccountsRequest")
	proto.RegisterType((*QueryTokenizedAccountsResponse)(nil), "microtx.v1.QueryTokenizedAccountsResponse")
	proto.RegisterType((*QueryTokenizedAccountRequest)(nil), "microtx.v1.QueryTokenizedAccountRequest")
	proto.RegisterType((*QueryTokenizedAccountResponse)(nil), "microtx.v1.QueryTokenizedAccountResponse")
}

func init() { proto.RegisterFile("microtx/v1/query.proto", fileDescriptor_1552e394eb0ed2e0) }

var fileDescriptor_1552e394eb0ed2e0 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0x67, 0xfb, 0x87, 0xd8, 0xc7, 0xa5, 0x7d, 0x22, 0xc5, 0x0d, 0xec, 0x92, 0x35, 0x1a, 0xaa,
	0x91, 0x6d, 0xf1, 0xd2, 0x2b, 0x3d, 0xe8, 0x45, 0x13, 0x25, 0x5e, 0xec, 0x85, 0x4c, 0xe1, 0xb1,
	0x6c, 0x2c, 0x33, 0x74, 0x67, 0xc0, 0xd6, 0x63, 0xcf, 0xc6, 0x18, 0xfd, 0x52, 0x3d, 0x36, 0xf1,
	0xe2, 0xc9, 0x18, 0xf0, 0x83, 0x18, 0x66, 0x07, 0xba, 0x65, 0xa5, 0x36, 0xf1, 0x36, 0xf3, 0xe6,
	0xf7, 0xef, 0xc1, 0x2f, 0x0b, 0x85, 0x7e, 0xd8, 0x8e, 0x84, 0x3a, 0xf5, 0x47, 0x7b, 0xfe, 0xc9,
	0x90, 0xa2, 0xb3, 0xda, 0x20, 0x12, 0x4a, 0x20, 0x98, 0x79, 0x6d, 0xb4, 0x67, 0x17, 0x13, 0x98,
	0x80, 0x38, 0xc9, 0x50, 0xc6, 0x28, 0xfb, 0x5e, 0xe2, 0xa5, 0x2f, 0x83, 0xd9, 0x38, 0x1f, 0x88,
	0x40, 0xe8, 0xa3, 0x3f, 0x3d, 0x99, 0x69, 0x29, 0x10, 0x22, 0x38, 0x26, 0x9f, 0x0d, 0x42, 0x9f,
	0x71, 0x2e, 0x14, 0x53, 0xa1, 0xe0, 0x86, 0xe3, 0xe5, 0x01, 0xdf, 0x4c, 0xfd, 0x5f, 0xb3, 0x88,
	0xf5, 0x65, 0x93, 0x4e, 0x86, 0x24, 0x95, 0xf7, 0x02, 0xee, 0x5e, 0x9b, 0xca, 0x81, 0xe0, 0x92,
	0x70, 0x17, 0xb2, 0x03, 0x3d, 0x29, 0x5a, 0x15, 0xab, 0x9a, 0xab, 0x63, 0xed, 0x2a, 0x6e, 0x2d,
	0xc6, 0x1e, 0xac, 0x5d, 0xfc, 0x74, 0x33, 0x4d, 0x83, 0xf3, 0x76, 0xa1, 0xa0, 0x85, 0x5e, 0xc5,
	0xb8, 0xe7, 0x44, 0xc6, 0x02, 0x0b, 0x90, 0x65, 0x7d, 0x31, 0xe4, 0x4a, 0x6b, 0xad, 0x35, 0xcd,
	0xcd, 0xdb, 0x87, 0xed, 0x14, 0xc3, 0xd8, 0x97, 0x01, 0xba, 0x44, 0xad, 0x6b, 0xb4, 0x8d, 0x2e,
	0x51, 0x23, 0x66, 0xba, 0x50, 0xd6, 0xcc, 0xb7, 0xe2, 0x3d, 0xf1, 0xf0, 0x23, 0x75, 0x1a, 0xed,
	0xf6, 0xf4, 0x61, 0xbe, 0xd5, 0x21, 0x38, 0xcb, 0x00, 0xc6, 0x61, 0x1f, 0xee, 0x30, 0x33, 0x2b,
	0x5a, 0x95, 0xd5, 0x6a, 0xae, 0x5e, 0x4a, 0xae, 0xb8, 0x48, 0x6c, 0xce, 0xd1, 0xde, 0xb9, 0x05,
	0xa5, 0xbf, 0x8a, 0xcf, 0xf6, 0xcd, 0xc3, 0xba, 0xf8, 0xc0, 0x29, 0xd2, 0xb9, 0x37, 0x9a, 0xf1,
	0x05, 0x9f, 0xc0, 0x96, 0x9a, 0x11, 0x5a, 0x46, 0xac, 0xb8, 0xa2, 0x11, 0x9b, 0x6a, 0x41, 0x09,
	0x5d, 0xc8, 0xf1, 0xae, 0x6a, 0xb1, 0x4e, 0x27, 0x22, 0x29, 0x8b, 0xab, 0x1a, 0x06, 0xbc, 0xab,
	0x1a, 0xf1, 0xc4, 0x7b, 0xb7, 0xe4, 0x17, 0xf8, 0xff, 0xfd, 0xea, 0x9f, 0xd6, 0x60, 0x5d, 0x6b,
	0x23, 0x41, 0x36, 0xfe, 0xab, 0xd1, 0x49, 0x72, 0xd3, 0x2d, 0xb2, 0xdd, 0xa5, 0xef, 0x71, 0x1c,
	0xcf, 0x3e, 0xff, 0xfe, 0xfb, 0xdb, 0x4a, 0x1e, 0xd1, 0x4f, 0x14, 0x3a, 0x6e, 0x0e, 0x8e, 0x00,
	0xae, 0x2a, 0x80, 0x5e, 0x4a, 0x2a, 0xd5, 0x28, 0xfb, 0xc1, 0x8d, 0x18, 0x63, 0xe9, 0x6a, 0xcb,
	0xfb, 0xb8, 0x9d, 0xb4, 0x34, 0xc7, 0x56, 0x97, 0x08, 0xbf, 0x5a, 0xb0, 0x95, 0x2a, 0x08, 0xee,
	0xa4, 0xb4, 0x97, 0xb5, 0xcc, 0x7e, 0x7c, 0x1b, 0xa8, 0x49, 0xf3, 0x48, 0xa7, 0xa9, 0xa0, 0x93,
	0x4c, 0x93, 0x2a, 0x84, 0xc4, 0xcf, 0x16, 0x6c, 0x2e, 0xaa, 0x60, 0xf5, 0x9f, 0x46, 0xb3, 0x48,
	0x3b, 0xb7, 0x40, 0x9a, 0x44, 0x0f, 0x75, 0x22, 0x17, 0xcb, 0x37, 0x26, 0x3a, 0x78, 0x79, 0x31,
	0x76, 0xac, 0xcb, 0xb1, 0x63, 0xfd, 0x1a, 0x3b, 0xd6, 0x97, 0x89, 0x93, 0xb9, 0x9c, 0x38, 0x99,
	0x1f, 0x13, 0x27, 0x73, 0x58, 0x0f, 0x42, 0xd5, 0x1b, 0x1e, 0xd5, 0xda, 0xa2, 0xef, 0xb3, 0x63,
	0xd5, 0x23, 0xf6, 0x94, 0x93, 0x9a, 0x1d, 0xdb, 0x3d, 0x16, 0x72, 0xff, 0x74, 0x2e, 0xae, 0xce,
	0x06, 0x24, 0x8f, 0xb2, 0xfa, 0x5b, 0xf4, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xfd,
	0x9e, 0xf6, 0x16, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Query the current microtx params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Get an authoritative fee amount which must be paid on Microtx
	MicrotxFee(ctx context.Context, in *QueryMicrotxFeeRequest, opts ...grpc.CallOption) (*QueryMicrotxFeeResponse, error)
	// Get all of the tokenized accounts known to the module
	TokenizedAccounts(ctx context.Context, in *QueryTokenizedAccountsRequest, opts ...grpc.CallOption) (*QueryTokenizedAccountsResponse, error)
	// Get info about one particular tokenized account by owner, bech32 address, or nft address
	// TODO: Investigate the http API and what we might need to put into this URL
	TokenizedAccount(ctx context.Context, in *QueryTokenizedAccountRequest, opts ...grpc.CallOption) (*QueryTokenizedAccountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/microtx.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MicrotxFee(ctx context.Context, in *QueryMicrotxFeeRequest, opts ...grpc.CallOption) (*QueryMicrotxFeeResponse, error) {
	out := new(QueryMicrotxFeeResponse)
	err := c.cc.Invoke(ctx, "/microtx.v1.Query/MicrotxFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizedAccounts(ctx context.Context, in *QueryTokenizedAccountsRequest, opts ...grpc.CallOption) (*QueryTokenizedAccountsResponse, error) {
	out := new(QueryTokenizedAccountsResponse)
	err := c.cc.Invoke(ctx, "/microtx.v1.Query/TokenizedAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizedAccount(ctx context.Context, in *QueryTokenizedAccountRequest, opts ...grpc.CallOption) (*QueryTokenizedAccountResponse, error) {
	out := new(QueryTokenizedAccountResponse)
	err := c.cc.Invoke(ctx, "/microtx.v1.Query/TokenizedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Query the current microtx params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Get an authoritative fee amount which must be paid on Microtx
	MicrotxFee(context.Context, *QueryMicrotxFeeRequest) (*QueryMicrotxFeeResponse, error)
	// Get all of the tokenized accounts known to the module
	TokenizedAccounts(context.Context, *QueryTokenizedAccountsRequest) (*QueryTokenizedAccountsResponse, error)
	// Get info about one particular tokenized account by owner, bech32 address, or nft address
	// TODO: Investigate the http API and what we might need to put into this URL
	TokenizedAccount(context.Context, *QueryTokenizedAccountRequest) (*QueryTokenizedAccountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) MicrotxFee(ctx context.Context, req *QueryMicrotxFeeRequest) (*QueryMicrotxFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MicrotxFee not implemented")
}
func (*UnimplementedQueryServer) TokenizedAccounts(ctx context.Context, req *QueryTokenizedAccountsRequest) (*QueryTokenizedAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizedAccounts not implemented")
}
func (*UnimplementedQueryServer) TokenizedAccount(ctx context.Context, req *QueryTokenizedAccountRequest) (*QueryTokenizedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizedAccount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtx.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MicrotxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMicrotxFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MicrotxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtx.v1.Query/MicrotxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MicrotxFee(ctx, req.(*QueryMicrotxFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtx.v1.Query/TokenizedAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizedAccounts(ctx, req.(*QueryTokenizedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtx.v1.Query/TokenizedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizedAccount(ctx, req.(*QueryTokenizedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microtx.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "MicrotxFee",
			Handler:    _Query_MicrotxFee_Handler,
		},
		{
			MethodName: "TokenizedAccounts",
			Handler:    _Query_TokenizedAccounts_Handler,
		},
		{
			MethodName: "TokenizedAccount",
			Handler:    _Query_TokenizedAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microtx/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMicrotxFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMicrotxFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMicrotxFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMicrotxFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMicrotxFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMicrotxFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeeAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizedAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizedAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizedAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTokenizedAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizedAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizedAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizedAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizedAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizedAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenizedAccount) > 0 {
		i -= len(m.TokenizedAccount)
		copy(dAtA[i:], m.TokenizedAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenizedAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizedAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizedAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizedAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMicrotxFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryMicrotxFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeAmount != 0 {
		n += 1 + sovQuery(uint64(m.FeeAmount))
	}
	return n
}

func (m *QueryTokenizedAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTokenizedAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenizedAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenizedAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizedAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMicrotxFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMicrotxFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMicrotxFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMicrotxFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMicrotxFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMicrotxFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			m.FeeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizedAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizedAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizedAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizedAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizedAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizedAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &TokenizedAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizedAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizedAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizedAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenizedAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenizedAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizedAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizedAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizedAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &TokenizedAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
