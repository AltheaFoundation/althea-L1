// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtx/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgMicrotx A Msg used to send funds from one Althea network wallet to another,
// via an automated device. Facilitates Liquid Infrastructure by automatically
// redirecting funds received by Liquid Infrastructure beyond configured amounts to the EVM.
// SENDER The account sending funds to receiver, must also be the signer of the
// message
// RECEIVER The account receiving funds from sender
// AMOUNTS The tokens and their quantities which should be transferred, these
// must be Cosmos coins registered as ERC20s, or the Cosmos representation of ERC20s
type MsgMicrotx struct {
	Sender   string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string     `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amount   types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgMicrotx) Reset()         { *m = MsgMicrotx{} }
func (m *MsgMicrotx) String() string { return proto.CompactTextString(m) }
func (*MsgMicrotx) ProtoMessage()    {}
func (*MsgMicrotx) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{0}
}
func (m *MsgMicrotx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMicrotx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMicrotx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMicrotx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMicrotx.Merge(m, src)
}
func (m *MsgMicrotx) XXX_Size() int {
	return m.Size()
}
func (m *MsgMicrotx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMicrotx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMicrotx proto.InternalMessageInfo

func (m *MsgMicrotx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgMicrotx) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgMicrotx) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgMicrotxResponse struct {
}

func (m *MsgMicrotxResponse) Reset()         { *m = MsgMicrotxResponse{} }
func (m *MsgMicrotxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMicrotxResponse) ProtoMessage()    {}
func (*MsgMicrotxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{1}
}
func (m *MsgMicrotxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMicrotxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMicrotxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMicrotxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMicrotxResponse.Merge(m, src)
}
func (m *MsgMicrotxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMicrotxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMicrotxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMicrotxResponse proto.InternalMessageInfo

// A type for the block's event log, every successful Microtx must create one of
// these in the event log
type EventMicrotx struct {
	Sender   string       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string       `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amounts  []types.Coin `protobuf:"bytes,3,rep,name=amounts,proto3" json:"amounts"`
	Fee      []types.Coin `protobuf:"bytes,4,rep,name=fee,proto3" json:"fee"`
}

func (m *EventMicrotx) Reset()         { *m = EventMicrotx{} }
func (m *EventMicrotx) String() string { return proto.CompactTextString(m) }
func (*EventMicrotx) ProtoMessage()    {}
func (*EventMicrotx) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{2}
}
func (m *EventMicrotx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMicrotx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMicrotx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMicrotx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMicrotx.Merge(m, src)
}
func (m *EventMicrotx) XXX_Size() int {
	return m.Size()
}
func (m *EventMicrotx) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMicrotx.DiscardUnknown(m)
}

var xxx_messageInfo_EventMicrotx proto.InternalMessageInfo

func (m *EventMicrotx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventMicrotx) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventMicrotx) GetAmounts() []types.Coin {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *EventMicrotx) GetFee() []types.Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

// A type for the block's event log recording when a Liquid Infrastructure account
// has a received balance redirected to its registered LiquidInfrastructureNFT
type EventBalanceRedirect struct {
	Account string     `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Amount  types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *EventBalanceRedirect) Reset()         { *m = EventBalanceRedirect{} }
func (m *EventBalanceRedirect) String() string { return proto.CompactTextString(m) }
func (*EventBalanceRedirect) ProtoMessage()    {}
func (*EventBalanceRedirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{3}
}
func (m *EventBalanceRedirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBalanceRedirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBalanceRedirect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBalanceRedirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBalanceRedirect.Merge(m, src)
}
func (m *EventBalanceRedirect) XXX_Size() int {
	return m.Size()
}
func (m *EventBalanceRedirect) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBalanceRedirect.DiscardUnknown(m)
}

var xxx_messageInfo_EventBalanceRedirect proto.InternalMessageInfo

func (m *EventBalanceRedirect) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EventBalanceRedirect) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// Records critical information about a Liquid Infrastructure Account
// ACCOUNT The bech32 address of the liquid infrastructure account
// OWNER The bech32 address of the account now in control of the liquid infrastructure
// NFT_ADDRESS The EVM address of the token contract in control of the liquid infrastructure account's accrued profits
type LiquidInfrastructureAccount struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	NftAddress string `protobuf:"bytes,3,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
}

func (m *LiquidInfrastructureAccount) Reset()         { *m = LiquidInfrastructureAccount{} }
func (m *LiquidInfrastructureAccount) String() string { return proto.CompactTextString(m) }
func (*LiquidInfrastructureAccount) ProtoMessage()    {}
func (*LiquidInfrastructureAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{4}
}
func (m *LiquidInfrastructureAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidInfrastructureAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidInfrastructureAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidInfrastructureAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidInfrastructureAccount.Merge(m, src)
}
func (m *LiquidInfrastructureAccount) XXX_Size() int {
	return m.Size()
}
func (m *LiquidInfrastructureAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidInfrastructureAccount.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidInfrastructureAccount proto.InternalMessageInfo

func (m *LiquidInfrastructureAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LiquidInfrastructureAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LiquidInfrastructureAccount) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

// MsgLiquify Converts the sender's account into a piece of Liquid Infrastructure,
// by creating a Non-fungible Token (NFT) within the Althea L1 EVM which will control all balances
// held by the Liquid Infrastructure Account (beyond a configurable threshold).
// The liquid infrastructure account itself will be the initial owner of the NFT,
// and must transfer control through the EVM NFT contract
// SENDER The bech32 address of the account to liquify, must also be the signer of the message
type MsgLiquify struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgLiquify) Reset()         { *m = MsgLiquify{} }
func (m *MsgLiquify) String() string { return proto.CompactTextString(m) }
func (*MsgLiquify) ProtoMessage()    {}
func (*MsgLiquify) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{5}
}
func (m *MsgLiquify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquify.Merge(m, src)
}
func (m *MsgLiquify) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquify) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquify.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquify proto.InternalMessageInfo

func (m *MsgLiquify) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgLiquifyResponse potentially returns useful information from the liquification of an account
type MsgLiquifyResponse struct {
	Account *LiquidInfrastructureAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *MsgLiquifyResponse) Reset()         { *m = MsgLiquifyResponse{} }
func (m *MsgLiquifyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLiquifyResponse) ProtoMessage()    {}
func (*MsgLiquifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{6}
}
func (m *MsgLiquifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquifyResponse.Merge(m, src)
}
func (m *MsgLiquifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquifyResponse proto.InternalMessageInfo

func (m *MsgLiquifyResponse) GetAccount() *LiquidInfrastructureAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

// A type for the block's event log, every successful MsgLiquify must create one of
// these in the event log
type EventAccountLiquified struct {
	Owned      string `protobuf:"bytes,1,opt,name=owned,proto3" json:"owned,omitempty"`
	NftAddress string `protobuf:"bytes,2,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
}

func (m *EventAccountLiquified) Reset()         { *m = EventAccountLiquified{} }
func (m *EventAccountLiquified) String() string { return proto.CompactTextString(m) }
func (*EventAccountLiquified) ProtoMessage()    {}
func (*EventAccountLiquified) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ddee508b32d6f4e, []int{7}
}
func (m *EventAccountLiquified) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAccountLiquified) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAccountLiquified.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAccountLiquified) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAccountLiquified.Merge(m, src)
}
func (m *EventAccountLiquified) XXX_Size() int {
	return m.Size()
}
func (m *EventAccountLiquified) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAccountLiquified.DiscardUnknown(m)
}

var xxx_messageInfo_EventAccountLiquified proto.InternalMessageInfo

func (m *EventAccountLiquified) GetOwned() string {
	if m != nil {
		return m.Owned
	}
	return ""
}

func (m *EventAccountLiquified) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgMicrotx)(nil), "microtx.v1.MsgMicrotx")
	proto.RegisterType((*MsgMicrotxResponse)(nil), "microtx.v1.MsgMicrotxResponse")
	proto.RegisterType((*EventMicrotx)(nil), "microtx.v1.EventMicrotx")
	proto.RegisterType((*EventBalanceRedirect)(nil), "microtx.v1.EventBalanceRedirect")
	proto.RegisterType((*LiquidInfrastructureAccount)(nil), "microtx.v1.LiquidInfrastructureAccount")
	proto.RegisterType((*MsgLiquify)(nil), "microtx.v1.MsgLiquify")
	proto.RegisterType((*MsgLiquifyResponse)(nil), "microtx.v1.MsgLiquifyResponse")
	proto.RegisterType((*EventAccountLiquified)(nil), "microtx.v1.EventAccountLiquified")
}

func init() { proto.RegisterFile("microtx/v1/msgs.proto", fileDescriptor_4ddee508b32d6f4e) }

var fileDescriptor_4ddee508b32d6f4e = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x8e, 0x12, 0x41,
	0x10, 0x65, 0x60, 0x05, 0xb7, 0xf0, 0x34, 0x82, 0x19, 0x59, 0x33, 0x4b, 0x26, 0x26, 0xee, 0xc5,
	0xe9, 0x80, 0x07, 0xe3, 0x11, 0x8c, 0x07, 0x93, 0xc5, 0x03, 0x17, 0x13, 0x0f, 0x6b, 0x9a, 0x9e,
	0x62, 0xe8, 0x04, 0xba, 0xb1, 0xbb, 0xc1, 0xe5, 0xea, 0x17, 0x98, 0xf8, 0x23, 0xfe, 0x84, 0xc9,
	0x1e, 0x37, 0xf1, 0xe2, 0xc9, 0x18, 0xf0, 0x43, 0x0c, 0x3d, 0xcd, 0xc0, 0xe2, 0x6a, 0xd6, 0x78,
	0xab, 0xaa, 0x2e, 0x5e, 0xbd, 0xf7, 0xaa, 0x18, 0xa8, 0x4f, 0x38, 0x53, 0xd2, 0x9c, 0x93, 0x79,
	0x8b, 0x4c, 0x74, 0xaa, 0xe3, 0xa9, 0x92, 0x46, 0xfa, 0xe0, 0xca, 0xf1, 0xbc, 0xd5, 0x08, 0x99,
	0xd4, 0x13, 0xa9, 0xc9, 0x80, 0x6a, 0x24, 0xf3, 0xd6, 0x00, 0x0d, 0x6d, 0x11, 0x26, 0xb9, 0xc8,
	0x7a, 0x1b, 0xb5, 0x54, 0xa6, 0xd2, 0x86, 0x64, 0x1d, 0xb9, 0xea, 0x83, 0x54, 0xca, 0x74, 0x8c,
	0x84, 0x4e, 0x39, 0xa1, 0x42, 0x48, 0x43, 0x0d, 0x97, 0xc2, 0xe1, 0x47, 0x0b, 0x80, 0x9e, 0x4e,
	0x7b, 0xd9, 0x10, 0xff, 0x1e, 0x94, 0x35, 0x8a, 0x04, 0x55, 0xe0, 0x35, 0xbd, 0x93, 0xc3, 0xbe,
	0xcb, 0xfc, 0x06, 0xdc, 0x56, 0xc8, 0x90, 0xcf, 0x51, 0x05, 0x45, 0xfb, 0x92, 0xe7, 0xfe, 0x53,
	0x28, 0xd3, 0x89, 0x9c, 0x09, 0x13, 0x94, 0x9a, 0xde, 0x49, 0xb5, 0x7d, 0x3f, 0xce, 0x68, 0xc6,
	0x6b, 0x9a, 0xb1, 0xa3, 0x19, 0x3f, 0x97, 0x5c, 0x74, 0x0f, 0x2e, 0xbe, 0x1f, 0x17, 0xfa, 0xae,
	0x3d, 0xaa, 0x81, 0xbf, 0x1d, 0xdd, 0x47, 0x3d, 0x95, 0x42, 0x63, 0xf4, 0xd9, 0x83, 0x3b, 0x2f,
	0xe6, 0x28, 0xcc, 0xff, 0x70, 0x7a, 0x06, 0x95, 0x6c, 0x88, 0x0e, 0x4a, 0xcd, 0xd2, 0x4d, 0x48,
	0x6d, 0xfa, 0xfd, 0x16, 0x94, 0x86, 0x88, 0xc1, 0xc1, 0xcd, 0x7e, 0xb6, 0xee, 0x8d, 0x38, 0xd4,
	0x2c, 0xe3, 0x2e, 0x1d, 0x53, 0xc1, 0xb0, 0x8f, 0x09, 0x57, 0xc8, 0x8c, 0x1f, 0x40, 0x85, 0x32,
	0x66, 0xad, 0xc9, 0xa8, 0x6f, 0xd2, 0x1d, 0xcf, 0x8a, 0xff, 0xe6, 0x99, 0x80, 0xa3, 0x53, 0xfe,
	0x6e, 0xc6, 0x93, 0x97, 0x62, 0xa8, 0xa8, 0x36, 0x6a, 0xc6, 0xcc, 0x4c, 0x61, 0xc7, 0xe1, 0xd6,
	0xe0, 0x96, 0x7c, 0x2f, 0x72, 0xab, 0xb2, 0x64, 0x97, 0x47, 0xf1, 0x2a, 0x8f, 0x63, 0xa8, 0x8a,
	0xa1, 0x79, 0x4b, 0x93, 0x44, 0xa1, 0xd6, 0x76, 0x81, 0x87, 0x7d, 0x10, 0x43, 0xd3, 0xc9, 0x2a,
	0xd1, 0x43, 0x7b, 0x1e, 0x76, 0xe4, 0x70, 0xf1, 0xa7, 0x55, 0x44, 0xaf, 0xed, 0x26, 0x5d, 0xd7,
	0x66, 0x93, 0x7e, 0xe7, 0xaa, 0xfc, 0x6a, 0xfb, 0x51, 0xbc, 0x3d, 0xe6, 0xf8, 0x2f, 0x32, 0x72,
	0x7e, 0xd1, 0x2b, 0xa8, 0x5b, 0x67, 0xdd, 0x43, 0x36, 0x81, 0x63, 0xb2, 0x11, 0x9a, 0xec, 0x0a,
	0x4d, 0xf6, 0xe5, 0x14, 0xf7, 0xe5, 0xb4, 0xbf, 0x78, 0x50, 0xea, 0xe9, 0xd4, 0x3f, 0x83, 0x4a,
	0x7e, 0x5e, 0xbb, 0xa4, 0xb6, 0xf7, 0xd8, 0x08, 0xaf, 0xaf, 0xe7, 0x77, 0x7a, 0xf4, 0xe1, 0xeb,
	0xcf, 0x4f, 0xc5, 0x7a, 0x74, 0x97, 0xec, 0xfe, 0x71, 0x1d, 0xe8, 0x19, 0x54, 0x72, 0xcf, 0xf6,
	0x70, 0x5c, 0xfd, 0x37, 0xfc, 0x3d, 0xf7, 0xae, 0xc7, 0x1f, 0x67, 0x4d, 0xdd, 0xd3, 0x8b, 0x65,
	0xe8, 0x5d, 0x2e, 0x43, 0xef, 0xc7, 0x32, 0xf4, 0x3e, 0xae, 0xc2, 0xc2, 0xe5, 0x2a, 0x2c, 0x7c,
	0x5b, 0x85, 0x85, 0x37, 0xed, 0x94, 0x9b, 0xd1, 0x6c, 0x10, 0x33, 0x39, 0x21, 0x74, 0x6c, 0x46,
	0x48, 0x1f, 0x0b, 0x34, 0x9b, 0x90, 0x8d, 0x28, 0x17, 0xe4, 0x3c, 0x87, 0x34, 0x8b, 0x29, 0xea,
	0x41, 0xd9, 0x7e, 0x0a, 0x9e, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x72, 0x3c, 0x9e, 0x70, 0x83,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// The Microtx service handles payments to Althea accounts
	Microtx(ctx context.Context, in *MsgMicrotx, opts ...grpc.CallOption) (*MsgMicrotxResponse, error)
	// The Liquify service converts an account into a piece of Liquid Infrastructure
	Liquify(ctx context.Context, in *MsgLiquify, opts ...grpc.CallOption) (*MsgLiquifyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Microtx(ctx context.Context, in *MsgMicrotx, opts ...grpc.CallOption) (*MsgMicrotxResponse, error) {
	out := new(MsgMicrotxResponse)
	err := c.cc.Invoke(ctx, "/microtx.v1.Msg/Microtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Liquify(ctx context.Context, in *MsgLiquify, opts ...grpc.CallOption) (*MsgLiquifyResponse, error) {
	out := new(MsgLiquifyResponse)
	err := c.cc.Invoke(ctx, "/microtx.v1.Msg/Liquify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// The Microtx service handles payments to Althea accounts
	Microtx(context.Context, *MsgMicrotx) (*MsgMicrotxResponse, error)
	// The Liquify service converts an account into a piece of Liquid Infrastructure
	Liquify(context.Context, *MsgLiquify) (*MsgLiquifyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Microtx(ctx context.Context, req *MsgMicrotx) (*MsgMicrotxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Microtx not implemented")
}
func (*UnimplementedMsgServer) Liquify(ctx context.Context, req *MsgLiquify) (*MsgLiquifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liquify not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Microtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMicrotx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Microtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtx.v1.Msg/Microtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Microtx(ctx, req.(*MsgMicrotx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Liquify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Liquify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtx.v1.Msg/Liquify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Liquify(ctx, req.(*MsgLiquify))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microtx.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Microtx",
			Handler:    _Msg_Microtx_Handler,
		},
		{
			MethodName: "Liquify",
			Handler:    _Msg_Liquify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microtx/v1/msgs.proto",
}

func (m *MsgMicrotx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMicrotx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMicrotx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMicrotxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMicrotxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMicrotxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventMicrotx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMicrotx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMicrotx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBalanceRedirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBalanceRedirect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBalanceRedirect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidInfrastructureAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidInfrastructureAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidInfrastructureAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAccountLiquified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAccountLiquified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAccountLiquified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owned) > 0 {
		i -= len(m.Owned)
		copy(dAtA[i:], m.Owned)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Owned)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMicrotx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgMicrotxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventMicrotx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	return n
}

func (m *EventBalanceRedirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *LiquidInfrastructureAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgLiquify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgLiquifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventAccountLiquified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owned)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMicrotx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMicrotx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMicrotx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMicrotxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMicrotxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMicrotxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMicrotx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMicrotx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMicrotx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBalanceRedirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBalanceRedirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBalanceRedirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidInfrastructureAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidInfrastructureAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidInfrastructureAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquifyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &LiquidInfrastructureAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAccountLiquified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAccountLiquified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAccountLiquified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owned = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
