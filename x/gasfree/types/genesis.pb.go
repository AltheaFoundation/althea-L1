// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: althea/gasfree/v1/genesis.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params struct
type Params struct {
	// Messages with one of these types will not be charged gas fees in the
	// AnteHandler, but will later be charged some form of fee in the Msg handler
	GasFreeMessageTypes []string `protobuf:"bytes,1,rep,name=gas_free_message_types,json=gasFreeMessageTypes,proto3" json:"gas_free_message_types,omitempty"`
	// Tokens usable with the gasfree erc20 module messages
	// these may be cosmos coins or ERC20 tokens which have been registered
	// with the erc20 module
	// The gasfree erc20 module messages are: MsgSendCoinToEVM, MsgSendERC20ToCosmos, and MsgSendERC20ToCosmosAndIBCTransfer
	GasFreeErc20InteropTokens []string `protobuf:"bytes,2,rep,name=gas_free_erc20_interop_tokens,json=gasFreeErc20InteropTokens,proto3" json:"gas_free_erc20_interop_tokens,omitempty"`
	// The fee in basis points (hundredths of a percent) charged on the gasfree erc20
	// module messages. This fee is charged to pay for the gas costs of executing
	// the message on chain. For example, a value of 100 basis points means a
	// fee of 1% for each gasfree erc20 transaction.
	// The gasfree erc20 module messages are: MsgSendCoinToEVM, MsgSendERC20ToCosmos, and MsgSendERC20ToCosmosAndIBCTransfer
	GasFreeErc20InteropFeeBasisPoints uint64 `protobuf:"varint,3,opt,name=gas_free_erc20_interop_fee_basis_points,json=gasFreeErc20InteropFeeBasisPoints,proto3" json:"gas_free_erc20_interop_fee_basis_points,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e21bc10ce13ce59, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetGasFreeMessageTypes() []string {
	if m != nil {
		return m.GasFreeMessageTypes
	}
	return nil
}

func (m *Params) GetGasFreeErc20InteropTokens() []string {
	if m != nil {
		return m.GasFreeErc20InteropTokens
	}
	return nil
}

func (m *Params) GetGasFreeErc20InteropFeeBasisPoints() uint64 {
	if m != nil {
		return m.GasFreeErc20InteropFeeBasisPoints
	}
	return 0
}

type GenesisState struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e21bc10ce13ce59, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "althea.gasfree.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "althea.gasfree.v1.GenesisState")
}

func init() { proto.RegisterFile("althea/gasfree/v1/genesis.proto", fileDescriptor_1e21bc10ce13ce59) }

var fileDescriptor_1e21bc10ce13ce59 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0x02, 0x41,
	0x18, 0x86, 0x9d, 0x0c, 0xa1, 0xa9, 0x4b, 0x1b, 0xc4, 0x7a, 0x68, 0x33, 0x2f, 0x79, 0x69, 0xb7,
	0x55, 0xba, 0xa7, 0x90, 0x11, 0x14, 0xc9, 0xe6, 0xa9, 0xcb, 0x30, 0xda, 0xe7, 0x38, 0x94, 0x33,
	0xcb, 0x7c, 0xa3, 0xd4, 0xbf, 0xe8, 0x67, 0x75, 0x14, 0xba, 0x74, 0x0c, 0xfd, 0x23, 0xb1, 0x33,
	0x8b, 0x97, 0xea, 0xfc, 0x3e, 0xef, 0x03, 0xdf, 0xfb, 0xd1, 0x63, 0xfe, 0x62, 0xa7, 0xc0, 0x13,
	0xc1, 0x71, 0x62, 0x00, 0x92, 0x45, 0x9a, 0x08, 0x50, 0x80, 0x12, 0xe3, 0xdc, 0x68, 0xab, 0x83,
	0x7d, 0x0f, 0xc4, 0x25, 0x10, 0x2f, 0xd2, 0xe6, 0x27, 0xa1, 0xb5, 0x01, 0x37, 0x7c, 0x86, 0x41,
	0x87, 0x1e, 0x0a, 0x8e, 0xac, 0x48, 0xd8, 0x0c, 0x10, 0xb9, 0x00, 0x66, 0xdf, 0x72, 0xc0, 0x90,
	0x34, 0xaa, 0xad, 0x9d, 0xec, 0x40, 0x70, 0xec, 0x1b, 0x80, 0x3b, 0x9f, 0x0d, 0x8b, 0x28, 0xb8,
	0xa4, 0x47, 0x9b, 0x12, 0x98, 0x71, 0xfb, 0x9c, 0x49, 0x65, 0xc1, 0xe8, 0x9c, 0x59, 0xfd, 0x0c,
	0x0a, 0xc3, 0x2d, 0xd7, 0xad, 0x97, 0xdd, 0xab, 0x02, 0xb9, 0xf1, 0xc4, 0xd0, 0x01, 0x41, 0x46,
	0x4f, 0xff, 0x31, 0x4c, 0x00, 0xd8, 0x88, 0xa3, 0x44, 0x96, 0x6b, 0xa9, 0x2c, 0x86, 0xd5, 0x06,
	0x69, 0x6d, 0x67, 0x27, 0x7f, 0xb8, 0xfa, 0x00, 0xbd, 0x82, 0x1c, 0x38, 0xb0, 0xd9, 0xa5, 0x7b,
	0xd7, 0xfe, 0xf2, 0x07, 0xcb, 0x2d, 0x04, 0x29, 0xad, 0xe5, 0xee, 0xc8, 0x90, 0x34, 0x48, 0x6b,
	0xb7, 0x5d, 0x8f, 0x7f, 0x2d, 0x11, 0xfb, 0x15, 0xb2, 0x12, 0xec, 0xdd, 0x7f, 0xac, 0x22, 0xb2,
	0x5c, 0x45, 0xe4, 0x7b, 0x15, 0x91, 0xf7, 0x75, 0x54, 0x59, 0xae, 0xa3, 0xca, 0xd7, 0x3a, 0xaa,
	0x3c, 0x5e, 0x08, 0x69, 0xa7, 0xf3, 0x51, 0x3c, 0xd6, 0xb3, 0xa4, 0xeb, 0x34, 0x7d, 0x3d, 0x57,
	0x4f, 0xdc, 0x4a, 0xad, 0x12, 0xef, 0x3d, 0xbb, 0x4d, 0x93, 0xd7, 0xcd, 0x1f, 0xdc, 0x88, 0xa3,
	0x9a, 0xfb, 0x41, 0xe7, 0x27, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x83, 0x40, 0xb6, 0xa6, 0x01, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasFreeErc20InteropFeeBasisPoints != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.GasFreeErc20InteropFeeBasisPoints))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GasFreeErc20InteropTokens) > 0 {
		for iNdEx := len(m.GasFreeErc20InteropTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GasFreeErc20InteropTokens[iNdEx])
			copy(dAtA[i:], m.GasFreeErc20InteropTokens[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.GasFreeErc20InteropTokens[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GasFreeMessageTypes) > 0 {
		for iNdEx := len(m.GasFreeMessageTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GasFreeMessageTypes[iNdEx])
			copy(dAtA[i:], m.GasFreeMessageTypes[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.GasFreeMessageTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasFreeMessageTypes) > 0 {
		for _, s := range m.GasFreeMessageTypes {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.GasFreeErc20InteropTokens) > 0 {
		for _, s := range m.GasFreeErc20InteropTokens {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.GasFreeErc20InteropFeeBasisPoints != 0 {
		n += 1 + sovGenesis(uint64(m.GasFreeErc20InteropFeeBasisPoints))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasFreeMessageTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasFreeMessageTypes = append(m.GasFreeMessageTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasFreeErc20InteropTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasFreeErc20InteropTokens = append(m.GasFreeErc20InteropTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasFreeErc20InteropFeeBasisPoints", wireType)
			}
			m.GasFreeErc20InteropFeeBasisPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasFreeErc20InteropFeeBasisPoints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
