name: Rust

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: integration_tests/
      - name: Build Integration Tests
        run: cd integration_tests && cargo check --all --verbose
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: integration_tests/
      - name: Run Orchestrator tests
        run: cd integration_tests && cargo test --all --release --verbose
  rustfmt:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Check code formatting
        run: rustup component add rustfmt && cd integration_tests && cargo fmt --all -- --check
  clippy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: integration_tests/
      - name: Check for Clippy lints
        run: rustup component add clippy && cd integration_tests && cargo clippy --all --all-targets --all-features -- -D warnings
  audit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: integration_tests/
      - name: Run Cargo Audit
        run: cargo install cargo-audit && cd integration_tests && cargo audit
  cross-compile-arm64:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: integration_tests/
      - name: Cross compile tests
        run: cargo install cross && cd integration_tests && cross test --all --exclude proto_build --release --target aarch64-unknown-linux-gnu
